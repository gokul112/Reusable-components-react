{"version":3,"sources":["components/Button/Button.js","components/Input/Input.js","components/Select/Select.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","useState","size","variant","label","disable","outline","className","disabled","Input","type","inputValue","setInputValue","placeholder","class","classSize","value","onChange","event","target","Select","data","selectedData","updateSelectedData","options","map","key","id","name","onSelectChange","Modal","show","message","App","handleChange","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bdba0575.chunk.js","sourcesContent":["import React,{useState} from 'react'\n\nfunction Button(props) {\n  const [size] = useState(props.size);\n  const [variant] = useState(props.variant);\n  const [label] = useState(props.label);\n  const [disable] = useState(props.disable);\n  const [outline] = useState(props.outline);\n  return (\n    <button className={`btn-${variant} btn-${size} btn-${outline}`}  label = {label} disabled={disable}>{label}</button>\n  );\n}\n\nexport default Button\n","import React, { useState } from 'react'\n\nfunction Input(props) {\n    const [type] =  useState(props.type);\n    const [inputValue,setInputValue] = useState('');\n    const [placeholder] = useState(props.placeholder);\n    const [classSize] = useState(props.class);\n\n    function handleChange(event){\n        setInputValue(event.target.value);\n        props.onChange(inputValue);\n    }\n\n    return (\n        <input className={`col-${classSize} form-control`} type={type} value={inputValue} onChange={handleChange} placeholder={placeholder} ></input>\n    )\n}\n\nexport default Input\n","import React,{useState} from 'react'\n\nfunction Select(props) {\n\n  const [data] = useState(props.data);\n  const [selectedData, updateSelectedData] = useState(\"\");\n  const [classSize] = useState(props.className)\n \n  function handleChange(event){\n    updateSelectedData(event.target.value);\n    if (props.onSelectChange) props.onSelectChange(selectedData);\n  }\n\n  let options = data.map(data => (\n    <option key={data.id} value={data.id}>\n      {data.name}\n    </option>\n  ));\n\n    return (\n        <div>\n            <select name=\"customSearch\" className={`col-${classSize} form-control custom-search-select`} onChange={handleChange}>\n                <option>Select Item</option>\n                {options}\n            </select>\n            \n        </div>\n    )\n}\n\nexport default Select\n","import React, { useState } from 'react'\n\n\nfunction Modal(props) {\n    const [show] = useState(props.show);\n    const [message] = useState(props.message);\n   \n\n    return (\n     <div className={show ? \"modal display-block\" : \"modal display-none\"}>\n      <section className=\"modal-main\"><h1>{message}</h1></section>\n    </div>\n    )\n}\n\nexport default Modal\n","import React from 'react';\nimport './App.css';\nimport Button from './components/Button/Button';\nimport Input from './components/Input/Input';\nimport Select from './components/Select/Select';\nimport Modal from './Modal/Modal';\n\nfunction App() {\n  const data = [\n    {\n      id: \"1\",\n      name: \"One\"\n    },\n    {\n      id: \"2\",\n      name: \"Two\"\n    },\n    {\n      id: \"3\",\n      name: \"Three\"\n    },\n    {\n      id: \"4\",\n      name: \"Four\"\n    }\n  ];\n\n  function handleChange(event){\n    console.log(event);\n  }\n  function selectChange(event){\n    console.log(event);\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <Button variant=\"warning\" size={\"xs\"} label=\"xtra small Button\"/>\n        <Button variant=\"danger\" size={\"sm\"} label=\"Small Button\" />\n        <Button variant=\"default\" size={\"lg\"} label=\"Disabled Button\" disable=\"true\"/>\n        <Button variant=\"primary\" size={\"lg\"} label=\"Larger Button\"/>\n        <Button variant=\"secondary\" size={\"lg\"} label=\"Secondary Button\"/>\n        <Button variant=\"success\" size={\"lg\"} label=\"Success Button\"/>\n        <Button variant=\"warning\" size={\"lg\"} label=\"Warning Button\"/>\n        <Button variant=\"info\" size={\"lg\"} label=\"Info Button\"/>\n</div>\n<div>\n        <Button variant=\"default\" size={\"lg\"} outline=\"outline-default\" label=\"Default Button\" />\n        <Button variant=\"primary\" size={\"lg\"} outline=\"outline-primary\" label=\"Disabled Larger Button\" disable={\"true\"}/>\n        <Button variant=\"secondary\" size={\"lg\"} outline=\"outline-secondary\" label=\"Secondary Button\"/>\n        <Button variant=\"success\" size={\"lg\"} outline=\"outline-success\" label=\"Success Button\"/>\n        <Button variant=\"warning\" size={\"lg\"} outline=\"outline-warning\" label=\"Warning Button\"/>\n        <Button variant=\"info\" size={\"lg\"} outline=\"outline-info\" label=\"Info Button\"/>\n\n</div>\n<div className=\"border border-dark p-20 form-in\">\n  <Input type=\"email\" onChange={handleChange} placeholder=\"Enter E-mail\" class={\"md-4\"} />\n  <Input type=\"text\" onChange={handleChange}  placeholder=\"Enter text\" class={\"md-4\"}  />\n  <Input type=\"password\" onChange={handleChange} placeholder=\"Enter password\" class={\"md-4\"}   />\n  <Input type=\"number\" onChange={handleChange} placeholder=\"Enter number\" class={\"md-4\"}  />\n</div>\n\n<div className=\"border border-dark p-20 form-in\">\n  <Select data={data} onSelectChange={selectChange}  className={\"md-4\"} />\n</div>\n<div>\n  <Modal show={true} message=\"hello,sample modal\"><p>THIS IS A MODAL</p></Modal>\n</div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}